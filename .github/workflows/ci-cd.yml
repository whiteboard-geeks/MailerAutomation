name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          
      - name: Run unit tests
        run: |
          pytest tests/unit
          
  deploy-to-staging:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          
      - name: Deploy to Heroku Staging
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "mailer-automation-staging"
          heroku_email: ${{ vars.HEROKU_EMAIL }}
          
      - name: Wait for deployment to complete
        run: sleep 60  # Wait for the app to fully deploy
          
  webhook-tracker-tests:
    needs: deploy-to-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - name: Install Heroku CLI and get Redis URL
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          
          # Login to Heroku using API key
          cat > ~/.netrc << EOF
          machine api.heroku.com
            login ${{ vars.HEROKU_EMAIL }}
            password ${{ secrets.HEROKU_API_KEY }}
          machine git.heroku.com
            login ${{ vars.HEROKU_EMAIL }}
            password ${{ secrets.HEROKU_API_KEY }}
          EOF
          chmod 600 ~/.netrc
          
          # Get the Redis URL from Heroku config
          REDIS_URL=$(heroku config:get REDISCLOUD_URL -a mailer-automation-staging)
          echo "Retrieved Redis URL from Heroku staging app"
          
          # Set it as an environment variable for subsequent steps
          echo "REDISCLOUD_URL=$REDIS_URL" >> $GITHUB_ENV
      - name: Run webhook tracker integration tests against staging
        env:
          STAGING_URL: "https://mailer-automation-staging-a1a3b6abc50d.herokuapp.com"
          ENV_TYPE: "staging"
          CLOSE_API_KEY: ${{ secrets.CLOSE_API_KEY }}
          INSTANTLY_API_KEY: ${{ secrets.INSTANTLY_API_KEY }}
          # REDISCLOUD_URL is now available from the previous step via GITHUB_ENV
        run: |
          # Set the base URL for tests to point to staging
          export BASE_URL=$STAGING_URL
          
          # Run the integration tests against staging
          # Note: We don't set REDISCLOUD_URL to let it use Heroku's Redis
          echo "Running webhook tracker integration tests against staging..."
          pytest tests/integration/test_webhook_tracker_integration.py -v
          
  e2e-tests:
    needs: webhook-tracker-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          
      - name: Debug environment variables
        run: |
          echo "Checking if secrets are available (will show as masked if they are):"
          echo "CLOSE_API_KEY: ${{ secrets.CLOSE_API_KEY }}"
          echo "INSTANTLY_API_KEY: ${{ secrets.INSTANTLY_API_KEY }}"
          echo "WEBHOOK_API_KEY: ${{ secrets.WEBHOOK_API_KEY }}"
          echo "Checking if environment variables are set:"
          if [ -n "$CLOSE_API_KEY" ]; then echo "CLOSE_API_KEY is set"; else echo "CLOSE_API_KEY is NOT set"; fi
          if [ -n "$INSTANTLY_API_KEY" ]; then echo "INSTANTLY_API_KEY is set"; else echo "INSTANTLY_API_KEY is NOT set"; fi
          if [ -n "$WEBHOOK_API_KEY" ]; then echo "WEBHOOK_API_KEY is set"; else echo "WEBHOOK_API_KEY is NOT set"; fi
        env:
          CLOSE_API_KEY: ${{ secrets.CLOSE_API_KEY }}
          INSTANTLY_API_KEY: ${{ secrets.INSTANTLY_API_KEY }}
          WEBHOOK_API_KEY: ${{ secrets.WEBHOOK_API_KEY }}
          
      - name: Run E2E tests against staging
        env:
          STAGING_URL: "https://mailer-automation-staging-a1a3b6abc50d.herokuapp.com"
          ENV_TYPE: "staging"
          CLOSE_API_KEY: ${{ secrets.CLOSE_API_KEY }}
          INSTANTLY_API_KEY: ${{ secrets.INSTANTLY_API_KEY }}
          WEBHOOK_API_KEY: ${{ secrets.WEBHOOK_API_KEY }}
        run: |
          # Set the base URL for tests to point to staging
          export BASE_URL=$STAGING_URL
          # Print environment variables for debugging (without revealing secrets)
          echo "Environment variables set for testing:"
          if [ -n "$CLOSE_API_KEY" ]; then echo "CLOSE_API_KEY is set"; else echo "CLOSE_API_KEY is NOT set"; fi
          if [ -n "$INSTANTLY_API_KEY" ]; then echo "INSTANTLY_API_KEY is set"; else echo "INSTANTLY_API_KEY is NOT set"; fi
          if [ -n "$WEBHOOK_API_KEY" ]; then echo "WEBHOOK_API_KEY is set"; else echo "WEBHOOK_API_KEY is NOT set"; fi
          echo "BASE_URL: $BASE_URL"
          echo "ENV_TYPE: $ENV_TYPE"
          pytest tests/e2e
          
  deploy-to-production:
    needs: e2e-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          
      - name: Deploy to Heroku Production
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "mailer-automation"
          heroku_email: ${{ vars.HEROKU_EMAIL }}